                                        
                           Design Compiler Graphical 
                                 DC Ultra (TM)
                                  DFTMAX (TM)
                              Power Compiler (TM)
                                 DesignWare (R)
                                 DC Expert (TM)
                               Design Vision (TM)
                               HDL Compiler (TM)
                               VHDL Compiler (TM)
                                  DFT Compiler
                               Design Compiler(R)
                                        
                 Version K-2015.06 for linux64 - May 28, 2015 
                                        
                    Copyright (c) 1988 - 2015 Synopsys, Inc.
   This software and the associated documentation are proprietary to Synopsys,
 Inc. This software may only be used in accordance with the terms and conditions
 of a written license agreement with Synopsys, Inc. All other use, reproduction,
            or distribution of this software is strictly prohibited.
Initializing...
# Author: Manh-Hiep Dao: 197.hiepmanhdao@gmail.com
# Le Quy Don Technical University
set PROJECT_DIR                   $env(PROJECT_DIR)  ;# root path of the project
/home/userdata/ncs/hiepdm/00-projects/montgomery_multiplier
# all the synthesis scripts are in ${PROJECT_DIR)/syn
source -echo -verbose ${PROJECT_DIR}/syn/rm_setup/dc_setup.tcl
# Author: Manh-Hiep Dao: 197.hiepmanhdao@gmail.com
# Le Quy Don Technical University
source -echo -verbose ${PROJECT_DIR}/common/rm_setup/common_setup.tcl
Error: could not open script file "/home/userdata/ncs/hiepdm/00-projects/montgomery_multiplier/common/rm_setup/common_setup.tcl" (CMD-015)
source -echo -verbose ${PROJECT_DIR}/syn/rm_setup/dc_setup_filenames.tcl
# Author: Manh-Hiep Dao: 197.hiepmanhdao@gmail.com
# Le Quy Don Technical University
puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/userdata/ncs/hiepdm/00-projects/montgomery_multiplier/syn/rm_setup/dc_setup_filenames.tcl

#################################################################################
# Design Compiler Reference Methodology Filenames Setup
# Script: dc_setup_filenames.tcl
# Version: K-2015.06 (July 13, 2015)
# Copyright (C) 2010-2015 Synopsys, Inc. All rights reserved.
#################################################################################
#################################################################################
# Use this file to customize the filenames used in the Design Compiler
# Reference Methodology scripts.  This file is designed to be sourced at the
# beginning of the dc_setup.tcl file after sourcing the common_setup.tcl file.
#
# Note that the variables presented in this file depend on the type of flow
# selected when generating the reference methodology files.
#
# Example.
#    If you set DFT flow as FALSE, you will not see DFT related filename
#    variables in this file.
#
# When reusing this file for different flows or newer release, ensure that
# all the required filename variables are defined.  One way to do this is
# to source the default dc_setup_filenames.tcl file and then override the
# default settings as needed for your design.
#
# The default values are backwards compatible with older
# Design Compiler Reference Methodology releases.
#
# Note: Care should be taken when modifying the names of output files
#       that are used in other scripts or tools.
#################################################################################
#################################################################################
# General Flow Files
#################################################################################
##########################
# Milkyway Library Names #
##########################
set DCRM_MW_LIBRARY_NAME                                ${DESIGN_NAME}_LIB
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_MW_CEL_NAME                              ${DESIGN_NAME}_DCT
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
###############
# Input Files #
###############
set DCRM_RTL_READ_SCRIPT                                ${DESIGN_NAME}.dc.read_design.tcl
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_SDC_INPUT_FILE                                 ${DESIGN_NAME}.sdc
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_CONSTRAINTS_INPUT_FILE                         ${DESIGN_NAME}.constraints.tcl
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
###########
# Reports #
###########
set DCRM_CHECK_LIBRARY_REPORT                           ${DESIGN_NAME}.check_library.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_CONSISTENCY_CHECK_ENV_FILE                     ${DESIGN_NAME}.compile_ultra.env
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_CHECK_DESIGN_REPORT                            ${DESIGN_NAME}.check_design.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_ANALYZE_DATAPATH_EXTRACTION_REPORT             ${DESIGN_NAME}.analyze_datapath_extraction.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_QOR_REPORT                               ${DESIGN_NAME}.mapped.qor.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_TIMING_REPORT                            ${DESIGN_NAME}.mapped.timing.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_AREA_REPORT                              ${DESIGN_NAME}.mapped.area.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_POWER_REPORT                             ${DESIGN_NAME}.mapped.power.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_CLOCK_GATING_REPORT                      ${DESIGN_NAME}.mapped.clock_gating.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_SELF_GATING_REPORT                       ${DESIGN_NAME}.mapped.self_gating.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_THRESHOLD_VOLTAGE_GROUP_REPORT                 ${DESIGN_NAME}.mapped.threshold.voltage.group.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_INSTANTIATE_CLOCK_GATES_REPORT                 ${DESIGN_NAME}.instatiate_clock_gates.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
################
# Output Files #
################
set DCRM_AUTOREAD_RTL_SCRIPT                            ${DESIGN_NAME}.autoread_rtl.tcl
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE              ${DESIGN_NAME}.elab.ddc
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_COMPILE_ULTRA_DDC_OUTPUT_FILE                  ${DESIGN_NAME}.compile_ultra.ddc
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_DDC_OUTPUT_FILE                          ${DESIGN_NAME}.mapped.ddc
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_VERILOG_OUTPUT_FILE                      ${DESIGN_NAME}.mapped.v
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_NONPG_VERILOG_OUTPUT_FILE                ${DESIGN_NAME}.mapped.nonpg.v
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_FINAL_SDC_OUTPUT_FILE                          ${DESIGN_NAME}.mapped.sdc
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
#################################################################################
# DCT Flow Files
#################################################################################
###################
# DCT Input Files #
###################
set DCRM_DCT_DEF_INPUT_FILE                             ${DESIGN_NAME}.def
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FLOORPLAN_INPUT_FILE                       ${DESIGN_NAME}.fp
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE            ${DESIGN_NAME}.physical_constraints.tcl
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
###############
# DCT Reports #
###############
set DCRM_DCT_PHYSICAL_CONSTRAINTS_REPORT                ${DESIGN_NAME}.physical_constraints.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_CONGESTION_REPORT                    ${DESIGN_NAME}.mapped.congestion.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_CONGESTION_MAP_OUTPUT_FILE           ${DESIGN_NAME}.mapped.congestion_map.png
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_CONGESTION_MAP_WINDOW_OUTPUT_FILE    ${DESIGN_NAME}.mapped.congestion_map_window.png
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_QOR_SNAPSHOT_FOLDER                  ${DESIGN_NAME}.qor_snapshot
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT                  ${DESIGN_NAME}.qor_snapshot.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
####################
# DCT Output Files #
####################
set DCRM_DCT_FLOORPLAN_OUTPUT_FILE                      ${DESIGN_NAME}.initial.fp
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE                ${DESIGN_NAME}.mapped.fp
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_SPEF_OUTPUT_FILE                     ${DESIGN_NAME}.mapped.spef
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set DCRM_DCT_FINAL_SDF_OUTPUT_FILE                      ${DESIGN_NAME}.mapped.sdf
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set MVRCRM_RTL_READ_SCRIPT                              ${DESIGN_NAME}.MVRC.read_design.tcl
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set VCLPRM_RTL_READ_SCRIPT                              ${DESIGN_NAME}.VCLP.read_design.tcl
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
#################################################################################
# Formality Flow Files
#################################################################################
set DCRM_SVF_OUTPUT_FILE                                ${DESIGN_NAME}.mapped.svf
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set FMRM_RTL_READ_SCRIPT                                ${DESIGN_NAME}.FM.read_design.tcl
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set FMRM_UNMATCHED_POINTS_REPORT                        ${DESIGN_NAME}.fmv_unmatched_points.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set FMRM_FAILING_SESSION_NAME                           ${DESIGN_NAME}
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set FMRM_FAILING_POINTS_REPORT                          ${DESIGN_NAME}.fmv_failing_points.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set FMRM_ABORTED_POINTS_REPORT                          ${DESIGN_NAME}.fmv_aborted_points.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
set FMRM_ANALYZE_POINTS_REPORT                          ${DESIGN_NAME}.fmv_analyze_points.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/userdata/ncs/hiepdm/00-projects/montgomery_multiplier/syn/rm_setup/dc_setup_filenames.tcl

puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/userdata/ncs/hiepdm/00-projects/montgomery_multiplier/syn/rm_setup/dc_setup.tcl

#################################################################################
# Design Compiler Reference Methodology Setup for Top-Down Flow
# Script: dc_setup.tcl
# Version: K-2015.06 (July 13, 2015)
# Copyright (C) 2007-2015 Synopsys, Inc. All rights reserved.
#################################################################################
#################################################################################
# Setup Variables
#
# Modify settings in this section to customize your Design Compiler Reference 
# Methodology run.
# Portions of dc_setup.tcl may be used by other tools so program name checks
# are performed where necessary.
#################################################################################
# The following setting removes new variable info messages from the end of the log file
set_app_var sh_new_variable_message false
false
if {$synopsys_program_name == "dc_shell"}  {

  #################################################################################
  # Design Compiler Setup Variables
  #################################################################################

  # Use the set_host_options command to enable multicore optimization to improve runtime.
  # This feature has special usage and license requirements.  Refer to the 
  # "Support for Multicore Technology" section in the Design Compiler User Guide
  # for multicore usage guidelines.
  # Note: This is a DC Ultra feature and is not supported in DC Expert.

  # set_host_options -max_cores 4

  # Change alib_library_analysis_path to point to a central cache of analyzed libraries
  # to save runtime and disk space.  The following setting only reflects the
  # default value and should be changed to a central location for best results.

  set_app_var alib_library_analysis_path .

  # Add any additional Design Compiler variables needed here

}
.
set RTL_SOURCE_FILES  ""      ;# Enter the list of source RTL files if reading from RTL
# The following variables are used by scripts in the rm_dc_scripts folder to direct 
# the location of the output files.
set REPORTS_DIR "reports"
reports
set RESULTS_DIR "results"
results
file mkdir ${REPORTS_DIR}
file mkdir ${RESULTS_DIR}
#################################################################################
# Search Path Setup
#
# Set up the search path to find the libraries and design files.
#################################################################################
set_app_var search_path ". ${ADDITIONAL_SEARCH_PATH} $search_path"
Error: can't read "ADDITIONAL_SEARCH_PATH": no such variable
	Use error_info for more info. (CMD-013)
#################################################################################
# Library Setup
#
# This section is designed to work with the settings from common_setup.tcl
# without any additional modification.
#################################################################################
# Milkyway variable settings
# Make sure to define the Milkyway library variable
# mw_design_library, it is needed by write_milkyway command
set mw_reference_library ${MW_REFERENCE_LIB_DIRS}
Error: can't read "MW_REFERENCE_LIB_DIRS": no such variable
	Use error_info for more info. (CMD-013)
set mw_design_library ${DCRM_MW_LIBRARY_NAME}
Error: can't read "DCRM_MW_LIBRARY_NAME": no such variable
	Use error_info for more info. (CMD-013)
set mw_site_name_mapping { {CORE unit} {Core unit} {core unit} }
 {CORE unit} {Core unit} {core unit} 
# The remainder of the setup below should only be performed in Design Compiler
if {$synopsys_program_name == "dc_shell"}  {

  set_app_var target_library ${TARGET_LIBRARY_FILES}
  set_app_var synthetic_library dw_foundation.sldb
  set_app_var link_library "* $target_library $ADDITIONAL_LINK_LIB_FILES $synthetic_library"

  # Set min libraries if they exist
  foreach {max_library min_library} $MIN_LIBRARY_FILES {
    set_min_library $max_library -min_version $min_library
  }

  if {[shell_is_in_topographical_mode]} {

    # To activate the extended layer mode to support 4095 layers uncomment the extend_mw_layers command 
    # before creating the Milkyway library. The extended layer mode is permanent and cannot be reverted 
    # back to the 255 layer mode once activated.

    # extend_mw_layers

    # Only create new Milkyway design library if it doesn't already exist
    if {![file isdirectory $mw_design_library ]} {
      create_mw_lib   -technology $TECH_FILE                       -mw_reference_library $mw_reference_library                       $mw_design_library
    } else {
      # If Milkyway design library already exists, ensure that it is consistent with specified Milkyway reference libraries
      set_mw_lib_reference $mw_design_library -mw_reference_library $mw_reference_library
    }

    open_mw_lib     $mw_design_library

    check_library > ${REPORTS_DIR}/${DCRM_CHECK_LIBRARY_REPORT}

    set_tlu_plus_files -max_tluplus $TLUPLUS_MAX_FILE                        -min_tluplus $TLUPLUS_MIN_FILE                        -tech2itf_map $MAP_FILE

    check_tlu_plus_files
  }

  #################################################################################
  # Library Modifications
  #
  # Apply library modifications after the libraries are loaded.
  #################################################################################

  if {[file exists [which ${LIBRARY_DONT_USE_FILE}]]} {
    puts "RM-Info: Sourcing script file [which ${LIBRARY_DONT_USE_FILE}]\n"
    source -echo -verbose ${LIBRARY_DONT_USE_FILE}
  }
}
Error: can't read "TARGET_LIBRARY_FILES": no such variable
	Use error_info for more info. (CMD-013)
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/userdata/ncs/hiepdm/00-projects/montgomery_multiplier/syn/rm_setup/dc_setup.tcl

#################################################################################
# Design Compiler Reference Methodology Script for Top-Down Flow
# Script: dc.tcl
# Version: K-2015.06 (July 13, 2015)
# Copyright (C) 2007-2015 Synopsys, Inc. All rights reserved.
#################################################################################
#################################################################################
# Additional Variables
#
# Add any additional variables needed for your flow here.
#################################################################################
# No additional flow variables are being recommended
#################################################################################
# Setup for Formality Verification
#################################################################################
# In the event of an inconclusive (or hard) verification, we recommend using
# the set_verification_priority commands provided from the analyze_points command
# in Formality. The set_verification_priority commands target specific
# operators to reduce verification complexity while minimizing QoR impact.
# The set_verification_priority commands should be applied after the design
# is read and elaborated.
# For designs that don't have tight QoR constraints and don't have register retiming,
# you can use the following variable to enable the highest productivity single pass flow.
# This flow modifies the optimizations to make verification easier.
# This variable setting should be applied prior to reading in the RTL for the design.
# set_app_var simplified_verification_mode true
# For more information about facilitating formal verification in the flow, refer
# to the following SolvNet article:
# "Resolving Inconclusive and Hard Verifications in Design Compiler"
# https://solvnet.synopsys.com/retrieve/033140.html
# Define the verification setup file for Formality
set_svf ${RESULTS_DIR}/${DCRM_SVF_OUTPUT_FILE}
Error: can't read "DCRM_SVF_OUTPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
#################################################################################
# Setup SAIF Name Mapping Database
#
# Include an RTL SAIF for better power optimization and analysis.
#
# saif_map should be issued prior to RTL elaboration to create a name mapping
# database for better annotation.
################################################################################
# saif_map -start
#################################################################################
# Read in the RTL Design
#
# Read in the RTL source files or read in the elaborated design (.ddc).
#################################################################################
puts "RM-Info: Sourcing script file [which ${DCRM_RTL_READ_SCRIPT}]\n"
Error: can't read "DCRM_RTL_READ_SCRIPT": no such variable
	Use error_info for more info. (CMD-013)
source -echo -verbose ${DCRM_RTL_READ_SCRIPT}
Error: can't read "DCRM_RTL_READ_SCRIPT": no such variable
	Use error_info for more info. (CMD-013)
# OR
# You can read an elaborated design from the same release.
# Using an elaborated design from an older release will not give the best results.
# read_ddc ${DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE}
current_design ${DESIGN_NAME}
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
link
Error: Current design is not defined. (UID-4)
0
write -hierarchy -format ddc -output ${RESULTS_DIR}/${DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE}
Error: can't read "DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
#################################################################################
# Apply Logical Design Constraints
#################################################################################
# You can use either SDC file ${DCRM_SDC_INPUT_FILE} or Tcl file 
# ${DCRM_CONSTRAINTS_INPUT_FILE} to constrain your design.
if {[file exists [which ${DCRM_SDC_INPUT_FILE}]]} {
  puts "RM-Info: Reading SDC file [which ${DCRM_SDC_INPUT_FILE}]\n"
  read_sdc ${DCRM_SDC_INPUT_FILE}
}
Error: can't read "DCRM_SDC_INPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
if {[file exists [which ${DCRM_CONSTRAINTS_INPUT_FILE}]]} {
  puts "RM-Info: Sourcing script file [which ${DCRM_CONSTRAINTS_INPUT_FILE}]\n"
  source -echo -verbose ${DCRM_CONSTRAINTS_INPUT_FILE}
}
Error: can't read "DCRM_CONSTRAINTS_INPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
# You can enable analysis and optimization for multiple clocks per register.
# To use this, you must constrain to remove false interactions between mutually exclusive
# clocks.  This is needed to prevent unnecessary analysis that can result in
# a significant runtime increase with this feature enabled.
#
# set_clock_groups -physically_exclusive | -logically_exclusive | -asynchronous #                  -group {CLKA, CLKB} -group {CLKC, CLKD} 
#
# set_app_var timing_enable_multiple_clocks_per_reg true
#################################################################################
# Apply The Operating Conditions
#################################################################################
# Set operating condition on top level
# set_operating_conditions -max <max_opcond> -min <min_opcond>
#################################################################################
# Create Default Path Groups
#
# Separating these paths can help improve optimization.
# Remove these path group settings if user path groups have already been defined.
#################################################################################
set ports_clock_root [filter_collection [get_attribute [get_clocks] sources] object_class==port]
Error: Current design is not defined. (UID-4)
Error: Can't find clocks matching '*'. (UID-109)
group_path -name REGOUT -to [all_outputs] 
Error: Current design is not defined. (UID-4)
Error: Value for list '-to' must have 1 elements. (CMD-036)
0
group_path -name REGIN -from [remove_from_collection [all_inputs] ${ports_clock_root}] 
Error: Current design is not defined. (UID-4)
Error: Value for list '-from' must have 1 elements. (CMD-036)
0
group_path -name FEEDTHROUGH -from [remove_from_collection [all_inputs] ${ports_clock_root}] -to [all_outputs]
Error: Current design is not defined. (UID-4)
Error: Current design is not defined. (UID-4)
Error: Value for list '-from' must have 1 elements. (CMD-036)
Error: Value for list '-to' must have 1 elements. (CMD-036)
0
#################################################################################
# Power Optimization Section
#################################################################################
#############################################################################
# Clock Gating Setup
#############################################################################
# If your design has instantiated clock gates, you should use identify_clock_gating
# command to identify and the report_clock_gating -multi_stage to report them.
# identify_clock_gating
# report_clock_gating -multi_stage -nosplit > ${REPORTS_DIR}/${DCRM_INSTANTIATE_CLOCK_GATES_REPORT}
# If you do not want clock-gating to optimize your user instantiated 
# clock-gating cells, you should set the pwr_preserve_cg attribute upon
# those clock-gating cells.
# set_preserve_clock_gating [get_cell <user_clock_gating_cells>] 
# Default clock_gating_style suits most designs.  Change only if necessary.
# set_clock_gating_style -positive_edge_logic {integrated} -negative_edge_logic {integrated} -control_point before ...   
# Clock gate insertion is now performed during compile_ultra -gate_clock
# so insert_clock_gating is no longer recommended at this step.
# The following setting can be used to enable global clock gating.
# With global clock gating, common enables are extracted across hierarchies
# which results in fewer redundant clock gates. 
# set compile_clock_gating_through_hierarchy true 
# For better timing optimization of enable logic, clock latency for 
# clock gating cells can be optionally specified.
# set_clock_gate_latency -clock <clock_name> -stage <stage_num>     #         -fanout_latency {fanout_range1 latency_val1 fanout_range2 latency_val2 ...}
# You can use "set_self_gating_options" command to specify self-gating 
# options when -self_gating option is used in addition to -gate_clock 
# option at the compile_ultra command. To inserts self-gate on clock-gated
# registers, uncomment the following line:
# set_self_gating_options -interaction_with_clock_gating insert
#############################################################################
# Apply Power Optimization Constraints
#############################################################################
# Include a SAIF file, if possible, for power optimization.  If a SAIF file
# is not provided, the default toggle rate of 0.1 will be used for propagating
# switching activity.
# read_saif -auto_map_names -input ${DESIGN_NAME}.saif -instance < DESIGN_INSTANCE > -verbose
if {[shell_is_in_topographical_mode]} {
      # For multi-Vth design, replace the following to set the threshold voltage groups in the libraries.

      # set_attribute <my_hvt_lib> default_threshold_voltage_group HVT -type string
      # set_attribute <my_lvt_lib> default_threshold_voltage_group LVT -type string
    }
# Starting in J-2014.09, leakage optimization is the default flow and is always enabled.
if {[shell_is_in_topographical_mode]} {
      # Use the following command to enable power prediction using clock tree estimation.

      # set_power_prediction true -ct_references <LIB CELL LIST>
    }
if {[shell_is_in_topographical_mode]} {

  ##################################################################################
  # Apply Physical Design Constraints
  #
  # Optional: Floorplan information can be read in here if available.
  # This is highly recommended for irregular floorplans.
  #
  # Floorplan constraints can be provided from one of the following sources:
  # * extract_physical_constraints with a DEF file
  #	* read_floorplan with a floorplan file (written by write_floorplan)
  #	* User generated Tcl physical constraints
  #
  ##################################################################################

  # Specify ignored layers for routing to improve correlation
  # Use the same ignored layers that will be used during place and route

  if { ${MIN_ROUTING_LAYER} != ""} {
    set_ignored_layers -min_routing_layer ${MIN_ROUTING_LAYER}
  }
  if { ${MAX_ROUTING_LAYER} != ""} {
    set_ignored_layers -max_routing_layer ${MAX_ROUTING_LAYER}
  }

  report_ignored_layers

  # If the macro names change after mapping and writing out the design due to
  # ungrouping or Verilog change_names renaming, it may be necessary to translate 
  # the names to correspond to the cell names that exist before compile.

  # During DEF constraint extraction, extract_physical_constraints automatically
  # matches DEF names back to precompile names in memory using standard matching rules.
  # read_floorplan will also automatically perform this name matching.

  # Modify set_query_rules if other characters are used for hierarchy separators
  # or bus names. 

  # set_query_rules  -hierarchical_separators {/ _ .}   #                  -bus_name_notations {[] __ ()}     #                  -class {cell pin port net}         #                  -wildcard                          #                  -regsub_cumulative                 #                  -show

  ## For DEF floorplan input

  # The DEF file for Design Compiler Topographical can be written from IC Compiler using the following 
  # recommended options:
  # icc_shell> write_def -version 5.7 -rows_tracks_gcells -fixed -pins -blockages -specialnets   #                      -vias -regions_groups -verbose -output ${DCRM_DCT_DEF_INPUT_FILE}

  if {[file exists [which ${DCRM_DCT_DEF_INPUT_FILE}]]} {
    # If you have physical only cells as a part of your floorplan DEF file, you can use
    # the -allow_physical_cells option with extract_physical_constraints to include
    # the physical only cells as a part of the floorplan in Design Compiler to improve correlation.
    #
    # Note: With -allow_physical_cells, new logical cells in the DEF file
    #       that have a fixed location will also be added to the design in memory.
    #       See the extract_physical_constraints manpage for more information about
    #       identifying the cells added to the design when using -allow_physical_cells.
  
    # extract_physical_constraints -allow_physical_cells ${DCRM_DCT_DEF_INPUT_FILE}

    puts "RM-Info: Reading in DEF file [which ${DCRM_DCT_DEF_INPUT_FILE}]\n"
    extract_physical_constraints ${DCRM_DCT_DEF_INPUT_FILE}
  }
  
  # OR

  ## For floorplan file input

  # The floorplan file for Design Compiler Topographical can be written from IC Compiler using the following 
  # recommended options:
  # Note: IC Compiler requires the use of -placement {terminal} with -create_terminal beginning in the
  #       D-2010.03-SP1 release.
  # icc_shell> write_floorplan -placement {io terminal hard_macro soft_macro} -create_terminal   #                            -row -create_bound -preroute -track ${DCRM_DCT_FLOORPLAN_INPUT_FILE}

  # Read in the secondary floorplan file, previously written by write_floorplan in Design Compiler,
  # to restore physical-only objects back to the design, before reading the main floorplan file.

  if {[file exists [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects]]} {
    puts "RM-Info: Reading in secondary floorplan file [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects]\n"
    read_floorplan ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects
  }

  if {[file exists [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}]]} {
    puts "RM-Info: Reading in floorplan file [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}]\n"
    read_floorplan ${DCRM_DCT_FLOORPLAN_INPUT_FILE}
  }

  # OR

  ## For Tcl file input

  # For Tcl constraints, the name matching feature must be explicitly enabled
  # and will also use the set_query_rules setttings. This should be turned off
  # after the constraint read in order to minimize runtime.

  if {[file exists [which ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}]]} {
    set_app_var enable_rule_based_query true
    puts "RM-Info: Sourcing script file [which ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}]\n"
    source -echo -verbose ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}
    set_app_var enable_rule_based_query false 
  }


  # Use write_floorplan to save the applied floorplan.

  # Note: A secondary floorplan file ${DCRM_DCT_FLOORPLAN_OUTPUT_FILE}.objects
  #       might also be written to capture physical-only objects in the design.
  #       This file should be read in before reading the main floorplan file.

  write_floorplan -all ${RESULTS_DIR}/${DCRM_DCT_FLOORPLAN_OUTPUT_FILE}

  # Verify that all the desired physical constraints have been applied
  # Add the -pre_route option to include pre-routes in the report
  report_physical_constraints > ${REPORTS_DIR}/${DCRM_DCT_PHYSICAL_CONSTRAINTS_REPORT}
}
#################################################################################
# Apply Additional Optimization Constraints
#################################################################################
# Prevent assignment statements in the Verilog netlist.
set_fix_multiple_port_nets -all -buffer_constants
Error: Current design is not defined. (UID-4)
0
#################################################################################
# Save the compile environment snapshot for the Consistency Checker utility.
#
# This utility checks for inconsistent settings between Design Compiler and
# IC Compiler which can contribute to correlation mismatches.
#
# Download this utility from SolvNet.  See the following SolvNet article for
# complete details:
#
# https://solvnet.synopsys.com/retrieve/026366.html
#
# The article is titled: "Using the Consistency Checker to Automatically Compare
# Environment Settings Between Design Compiler and IC Compiler"
#################################################################################
# Uncomment the following to snapshot the environment for the Consistency Checker
# write_environment -consistency -output ${REPORTS_DIR}/${DCRM_CONSISTENCY_CHECK_ENV_FILE}
#################################################################################
# Check for Design Problems 
#################################################################################
# Check the current design for consistency
check_design -summary
Error: Current design is not defined. (UID-4)
0
check_design > ${REPORTS_DIR}/${DCRM_CHECK_DESIGN_REPORT}
Error: can't read "DCRM_CHECK_DESIGN_REPORT": no such variable
	Use error_info for more info. (CMD-013)
# The analyze_datapath_extraction command can help you to analyze why certain data 
# paths are no extracted, uncomment the following line to report analyisis.
# analyze_datapath_extraction > ${REPORTS_DIR}/${DCRM_ANALYZE_DATAPATH_EXTRACTION_REPORT}
#################################################################################
# Compile the Design
#
# Recommended Options:
#
#     -scan
#     -gate_clock (-self_gating)
#     -retime
#     -spg
#
# Use compile_ultra as your starting point. For test-ready compile, include
# the -scan option with the first compile and any subsequent compiles.
#
# Use -gate_clock to insert clock-gating logic during optimization.  This
# is now the recommended methodology for clock gating.
#
# Use -self_gating option in addition to -gate_clock for potentially saving 
# additional dynamic power, in topographical mode only. Registers that are 
# not clock gated will be considered for XOR self gating.
# XOR self gating should be performed along with clock gating, using -gate_clock
# and -self_gating options. XOR self gates will be inserted only if there is 
# potential power saving without degrading the timing.
# An accurate switching activity annotation either by reading in a saif 
# file or through set_switching_activity command is recommended.
# You can use "set_self_gating_options" command to specify self-gating 
# options.
#
# Use -retime to enable adaptive retiming optimization for further timing benefit.
#
# Use the -spg option to enable Design Compiler Graphical physical guidance flow.
# The physical guidance flow improves QoR, area and timing correlation, and congestion.
# It also improves place_opt runtime in IC Compiler.
#
# Note: In addition to -spg option you can enable the support of via resistance for 
#       RC estimation to improve the timing correlation with IC Compiler by using the 
#       following setting:
#
#       set_app_var spg_enable_via_resistance_support true
#
# You can selectively enable or disable the congestion optimization on parts of 
# the design by using the set_congestion_optimization command.
# This option requires a license for Design Compiler Graphical.
#
# The constant propagation is enabled when boundary optimization is disabled. In 
# order to stop constant propagation you can do the following
#
# set_compile_directives -constant_propagation false <object_list>
#
# Note: Layer optimization is on by default in Design Compiler Graphical, to 
#       improve the the accuracy of certain net delay during optimization.
#       To disable the the automatic layer optimization you can use the 
#       -no_auto_layer_optimization option.
#
#################################################################################
if {[shell_is_in_topographical_mode]} {
  # Use the "-check_only" option of "compile_ultra" to verify that your
  # libraries and design are complete and that optimization will not fail
  # in topographical mode.  Use the same options as will be used in compile_ultra.

  # compile_ultra -gate_clock -check_only
}
set_dynamic_optimization true
Error: Current design is not defined. (UID-4)
1
# set_power_low_power_placement true
compile_ultra -gate_clock
Error: Current design is not defined. (UID-4)
0
#compile_ultra
#################################################################################
# High-effort area optimization
#
# optimize_netlist -area command, was introduced in I-2013.12 release to improve
# area of gate-level netlists. The command performs monotonic gate-to-gate 
# optimization on mapped designs, thus improving area without degrading timing or
# leakage. 
#################################################################################
optimize_netlist -area
Error: Current design is not defined. (UID-4)
0
#################################################################################
# Write Out Final Design and Reports
#
#        .ddc:   Recommended binary format used for subsequent Design Compiler sessions
#    Milkyway:   Recommended binary format for IC Compiler
#        .v  :   Verilog netlist for ASCII flow (Formality, PrimeTime, VCS)
#       .spef:   Topographical mode parasitics for PrimeTime
#        .sdf:   SDF backannotated topographical mode timing for PrimeTime
#        .sdc:   SDC constraints for ASCII flow
#
#################################################################################
change_names -rules verilog -hierarchy
Error: Current design is not defined. (UID-4)
0
#################################################################################
# Write out Design
#################################################################################
write -format verilog -hierarchy -output ${RESULTS_DIR}/${DCRM_FINAL_VERILOG_OUTPUT_FILE}
Error: can't read "DCRM_FINAL_VERILOG_OUTPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
write -format ddc     -hierarchy -output ${RESULTS_DIR}/${DCRM_FINAL_DDC_OUTPUT_FILE}
Error: can't read "DCRM_FINAL_DDC_OUTPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
# Write and close SVF file and make it available for immediate use
set_svf -off
1
#################################################################################
# Write out Design Data
#################################################################################
if {[shell_is_in_topographical_mode]} {

  # Note: A secondary floorplan file ${DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE}.objects
  #       might also be written to capture physical-only objects in the design.
  #       This file should be read in before reading the main floorplan file.

  write_floorplan -all ${RESULTS_DIR}/${DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE}

  # Write parasitics data from Design Compiler Topographical placement for static timing analysis
  write_parasitics -output ${RESULTS_DIR}/${DCRM_DCT_FINAL_SPEF_OUTPUT_FILE}

  # Write SDF backannotation data from Design Compiler Topographical placement for static timing analysis
  write_sdf ${RESULTS_DIR}/${DCRM_DCT_FINAL_SDF_OUTPUT_FILE}

  # Do not write out net RC info into SDC
  set_app_var write_sdc_output_lumped_net_capacitance false
  set_app_var write_sdc_output_net_resistance false
}
write_sdc -nosplit ${RESULTS_DIR}/${DCRM_FINAL_SDC_OUTPUT_FILE}
Error: can't read "DCRM_FINAL_SDC_OUTPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
write_sdf ${RESULTS_DIR}/${DCRM_DCT_FINAL_SDF_OUTPUT_FILE}
Error: can't read "DCRM_DCT_FINAL_SDF_OUTPUT_FILE": no such variable
	Use error_info for more info. (CMD-013)
# If SAIF is used, write out SAIF name mapping file for PrimeTime-PX
# saif_map -type ptpx -write_map ${RESULTS_DIR}/${DESIGN_NAME}.mapped.SAIF.namemap
#################################################################################
# Generate Final Reports
#################################################################################
report_qor > ${REPORTS_DIR}/${DCRM_FINAL_QOR_REPORT}
Error: can't read "DCRM_FINAL_QOR_REPORT": no such variable
	Use error_info for more info. (CMD-013)
# Create a QoR snapshot of timing, physical, constraints, clock, power data, and routing on 
# active scenarios and stores it in the location  specified  by  the icc_snapshot_storage_location 
# variable. 
if {[shell_is_in_topographical_mode]} {
  set icc_snapshot_storage_location ${REPORTS_DIR}/${DCRM_DCT_FINAL_QOR_SNAPSHOT_FOLDER}
  create_qor_snapshot -name ${DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT} > ${REPORTS_DIR}/${DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT}
}
report_timing -transition_time -nets -attributes -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_TIMING_REPORT}
Error: can't read "DCRM_FINAL_TIMING_REPORT": no such variable
	Use error_info for more info. (CMD-013)
report_timing -transition_time -nets -attributes -nosplit -delay_type min > ${REPORTS_DIR}/${DESIGN_NAME}.mapped.timing_hold.rpt
Error: can't read "DESIGN_NAME": no such variable
	Use error_info for more info. (CMD-013)
if {[shell_is_in_topographical_mode]} {
  report_area -physical -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_AREA_REPORT}
} else {
  report_area -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_AREA_REPORT}
}
Error: can't read "DCRM_FINAL_AREA_REPORT": no such variable
	Use error_info for more info. (CMD-013)
if {[shell_is_in_topographical_mode]} {
  # report_congestion (topographical mode only) uses zroute for estimating and reporting 
  # routing related congestion which improves the congestion correlation with IC Compiler.
  # Design Compiler Topographical supports create_route_guide command to be consistent with IC
  # Compiler after topographical mode synthesis.
  # Those commands require a license for Design Compiler Graphical.

  report_congestion > ${REPORTS_DIR}/${DCRM_DCT_FINAL_CONGESTION_REPORT}

  # Use the following to generate and write out a congestion map from batch mode
  # This requires a GUI session to be temporarily opened and closed so a valid DISPLAY
  # must be set in your UNIX environment.

  if {[info exists env(DISPLAY)]} {
    gui_start

    # Create a layout window
    set MyLayout [gui_create_window -type LayoutWindow]

    # Build congestion map in case report_congestion was not previously run
    report_congestion -build_map

    # Display congestion map in layout window
    gui_show_map -map "Global Route Congestion" -show true

    # Zoom full to display complete floorplan
    gui_zoom -window [gui_get_current_window -view] -full

    # Write the congestion map out to an image file
    # You can specify the output image type with -format png | xpm | jpg | bmp

    # The following saves only the congestion map without the legends
    gui_write_window_image -format png -file ${REPORTS_DIR}/${DCRM_DCT_FINAL_CONGESTION_MAP_OUTPUT_FILE}

    # The following saves the entire congestion map layout window with the legends
    gui_write_window_image -window ${MyLayout} -format png -file ${REPORTS_DIR}/${DCRM_DCT_FINAL_CONGESTION_MAP_WINDOW_OUTPUT_FILE}

    gui_stop
  } else {
    puts "Information: The DISPLAY environment variable is not set. Congestion map generation has been skipped."
  }
}
# Use SAIF file for power analysis
# read_saif -auto_map_names -input ${DESIGN_NAME}.saif -instance < DESIGN_INSTANCE > -verbose
report_power -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_POWER_REPORT}
Error: can't read "DCRM_FINAL_POWER_REPORT": no such variable
	Use error_info for more info. (CMD-013)
report_clock_gating -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_CLOCK_GATING_REPORT}
Error: can't read "DCRM_FINAL_CLOCK_GATING_REPORT": no such variable
	Use error_info for more info. (CMD-013)
# Uncomment the next line if you include the -self_gating to the compile_ultra command
# to report the XOR Self Gating information.
# report_self_gating  -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_SELF_GATING_REPORT}
# Uncomment the next line to reports the number, area, and  percentage  of cells 
# for each threshold voltage group in the design.
# report_threshold_voltage_group -nosplit > ${REPORTS_DIR}/${DCRM_THRESHOLD_VOLTAGE_GROUP_REPORT}
#################################################################################
# Write out Milkyway Design for Top-Down Flow
#
# This should be the last step in the script
#################################################################################
if {[shell_is_in_topographical_mode]} {
  # write_milkyway uses mw_design_library variable from dc_setup.tcl
  write_milkyway -overwrite -output ${DCRM_FINAL_MW_CEL_NAME}
}
#exit
dc_shell> exit

Memory usage for main task 46 Mbytes.
Memory usage for this session 46 Mbytes.
CPU usage for this session 2 seconds ( 0.00 hours ).

Thank you...
