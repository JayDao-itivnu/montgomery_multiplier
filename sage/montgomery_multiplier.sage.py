

# This file was *autogenerated* from the file montgomery_multiplier.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16); _sage_const_163 = Integer(163); _sage_const_10000 = Integer(10000); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4)
def bits1(n):
    b = []
    while n:
        b = [n & _sage_const_1 ] + b
        n >>= _sage_const_1 
    return b or [_sage_const_0 ]

import os
import basic_operations
# Get environment variables
sim_dir = os.getenv('SIM_DIR')
test_file = os.getenv('DESIGN_NAME') + (".txt")
filename = os.path.join(sim_dir, test_file)
r = bits1(int("0x800000000000000000000000000000000000000C9", _sage_const_16 ));
len_of_bit = _sage_const_163 
no_of_test =  _sage_const_10000 
 
file = open(filename,"w")
for i in range(no_of_test) :
    a = randint(_sage_const_0 ,_sage_const_2 **len_of_bit - _sage_const_1 ); 
    if (a == _sage_const_0 ):
        a_ls = [_sage_const_0 ]
    else:
        a_ls = Integer(a).digits(_sage_const_2 )[::-_sage_const_1 ]
    b = randint(_sage_const_0 ,_sage_const_2 **(len_of_bit) - _sage_const_1 ); 
    if (b == _sage_const_0 ):
        b_ls = [_sage_const_0 ]
    else:
        b_ls = Integer(b).digits(_sage_const_2 )[::-_sage_const_1 ]
    if (len(a_ls) < len_of_bit):
        while (len_of_bit - len(a_ls) != _sage_const_0 ): a_ls.insert(_sage_const_0 ,_sage_const_0 )
    if (len(b_ls) < len_of_bit):
        while (len_of_bit - len(b_ls) != _sage_const_0 ): b_ls.insert(_sage_const_0 ,_sage_const_0 )
    file.write("N="); file.write(str(i+_sage_const_1 ))
    file.write("\nA=")
    a = hex(a)[_sage_const_2 :].zfill((len_of_bit+_sage_const_1 )/_sage_const_4 ) 
    file.write(a.upper())
    
    file.write("\nB=")
    b = hex(b)[_sage_const_2 :].zfill((len_of_bit+_sage_const_1 )/_sage_const_4 ) 
    file.write(b.upper())
    
    print ("complete", i,"/",no_of_test);
    result_ls = basic_operations.mul_poly(a_ls,b_ls,r)
    
    result = result_ls.zfill((len_of_bit+_sage_const_1 )/_sage_const_4 ) 
    file.write("\nC=")
    file.write(result)
    file.write("\n")
file.close()

